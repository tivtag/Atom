<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Error_CantChangeNameOfEventTriggerXToYThereAlreadyExistsSuchAnEventTrigger" xml:space="preserve">
    <value>Can't change the name of the EventTrigger '{0}' to '{1}'. There already exists such an EventTrigger in the owning Event Manager. EventTrigger names must be unique.</value>
  </data>
  <data name="Error_CantChangeNameOfEventXToYThereAlreadyExistsSuchAnEvent" xml:space="preserve">
    <value>Can't change the name of the Event '{0}' to '{1}'. There already exists such an Event in the owning Event Manager. Event names must be unique.</value>
  </data>
  <data name="Error_CantDoThisEventXTypeNameYHasNotBeenAddedToManager" xml:space="preserve">
    <value>Can't do this. The event '{0}' (type-name='{1}') has not been added to an EventManager.</value>
  </data>
  <data name="Error_EventManagerReturnedByEventServiceIsNull" xml:space="preserve">
    <value>The EventManager returned by the existing IEventManagerService is null.</value>
  </data>
  <data name="Error_EventNameIsNull" xml:space="preserve">
    <value>The name of the Event is null.</value>
  </data>
  <data name="Error_EventTriggerNameIsNull" xml:space="preserve">
    <value>The name of the EventTrigger is null.</value>
  </data>
  <data name="Error_EventTriggerXAlreadyAddedToAnEventManager" xml:space="preserve">
    <value>The EventTrigger '{0}' already has been added to an EventManager.</value>
  </data>
  <data name="Error_EventXAlreadyAddedToAnEventManager" xml:space="preserve">
    <value>The Event '{0}' already has been added to an EventManager.</value>
  </data>
  <data name="Error_EventXDoesNotExistInEventManager" xml:space="preserve">
    <value>The requested Event '{0}' doesn't exist in the EventManager.</value>
  </data>
  <data name="Error_FloorXIsInvalidFloorCountY" xml:space="preserve">
    <value>The floor number '{0} is invalid. Only values from 0 to {1} are valid.</value>
  </data>
  <data name="Error_IEventManagerServiceIsMissing" xml:space="preserve">
    <value>The IEventManagerService is missing. This is required for this operation.</value>
  </data>
  <data name="Error_LongTermEventRequiresEventManager" xml:space="preserve">
    <value>"The LongTermEvent is required to be added to an EventManager."</value>
  </data>
  <data name="Error_ThereAlreadyExistsAnEventNamedX" xml:space="preserve">
    <value>There already exists an Event with the name '{0}'. Events must have unique names.</value>
  </data>
  <data name="Error_ThereAlreadyExistsAnEventTriggerNamedX" xml:space="preserve">
    <value>There already exists an EventTrigger with the name '{0}'. EventTriggers must have unique names.</value>
  </data>
  <data name="MissingInformation" xml:space="preserve">
    <value>Missing Information</value>
  </data>
  <data name="PleaseEnterName" xml:space="preserve">
    <value>Please enter a name.</value>
  </data>
  <data name="PropCate_Identification" xml:space="preserve">
    <value>Identification</value>
  </data>
  <data name="PropCate_Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="PropDesc_AET_Area" xml:space="preserve">
    <value>The area in which the AreaEventTrigger may get triggered.</value>
  </data>
  <data name="PropDesc_AET_TileArea" xml:space="preserve">
    <value>The area in which the AreaEventTrigger may get triggered (in tile-space).</value>
  </data>
  <data name="PropDesc_DSEvent_EventOff" xml:space="preserve">
    <value>The Event that gets triggered when the DualSwitchEvent is triggered and the IsSwitched flag is false.</value>
  </data>
  <data name="PropDesc_DSEvent_EventOn" xml:space="preserve">
    <value>The Event that gets triggered when the DualSwitchEvent is triggered and the IsSwitched flag is true.</value>
  </data>
  <data name="PropDesc_DSEvent_IsSwitchable" xml:space="preserve">
    <value>States whether the DualSwitchEvent can be switched on or off..</value>
  </data>
  <data name="PropDesc_DSEvent_IsSwitched" xml:space="preserve">
    <value>States whether the DualSwitchEvent is initially in a switched state or not.</value>
  </data>
  <data name="PropDesc_ET_Event" xml:space="preserve">
    <value>The Event which gets triggered when the EventTrigger is triggered.</value>
  </data>
  <data name="PropDesc_ET_IsActive" xml:space="preserve">
    <value>States whether the EventTrigger is initially in an active state or not. Only active Triggers can get triggered.</value>
  </data>
  <data name="PropDesc_ET_Name" xml:space="preserve">
    <value>The (unique) name of the EventTrigger.</value>
  </data>
  <data name="PropDesc_E_Name" xml:space="preserve">
    <value>The (unique) name of the Event. </value>
  </data>
  <data name="PropDesc_Floor" xml:space="preserve">
    <value>The floor this Object is part of.</value>
  </data>
  <data name="PropDesc_MultiEvent_Events" xml:space="preserve">
    <value>The list of events this MultiEvent delegates all calls to Trigger to.</value>
  </data>
  <data name="PropDesc_TimedEvent_Event" xml:space="preserve">
    <value>The event that gets triggered after Time seconds after the TimedEvent was triggered.</value>
  </data>
  <data name="PropDesc_TimedEvent_Time" xml:space="preserve">
    <value>The time in seconds until the TimedEvent delegates a Trigger call onto the Event.</value>
  </data>
  <data name="PropDesc_TypeName" xml:space="preserve">
    <value>Specifies type information about the Object.</value>
  </data>
  <data name="PropDisp_AET_Area" xml:space="preserve">
    <value>Trigger Area</value>
  </data>
  <data name="PropDisp_AET_TileArea" xml:space="preserve">
    <value>Trigger Area (in tile-space)</value>
  </data>
  <data name="PropDisp_DSEvent_EventOff" xml:space="preserve">
    <value>Event (when disabled)</value>
  </data>
  <data name="PropDisp_DSEvent_EventOn" xml:space="preserve">
    <value>Event (when enabled)</value>
  </data>
  <data name="PropDisp_DSEvent_IsSwitchable" xml:space="preserve">
    <value>Is Switchable</value>
  </data>
  <data name="PropDisp_DSEvent_IsSwitched" xml:space="preserve">
    <value>Is Switched</value>
  </data>
  <data name="PropDisp_Event" xml:space="preserve">
    <value>Event</value>
  </data>
  <data name="PropDisp_Floor" xml:space="preserve">
    <value>Floor</value>
  </data>
  <data name="PropDisp_IsActive" xml:space="preserve">
    <value>Is Active</value>
  </data>
  <data name="PropDisp_MultiEvent_Events" xml:space="preserve">
    <value>Events</value>
  </data>
  <data name="PropDisp_Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="PropDisp_TimedEvent_Event" xml:space="preserve">
    <value>Event</value>
  </data>
  <data name="PropDisp_TimedEvent_Time" xml:space="preserve">
    <value>Time</value>
  </data>
  <data name="PropDisp_TypeName" xml:space="preserve">
    <value>Type Name</value>
  </data>
</root>