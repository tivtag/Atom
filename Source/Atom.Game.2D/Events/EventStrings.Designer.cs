//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Atom.Events {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class EventStrings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal EventStrings() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Atom.Game.Events.EventStrings", typeof(EventStrings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Can&apos;t change the name of the EventTrigger &apos;{0}&apos; to &apos;{1}&apos;. There already exists such an EventTrigger in the owning Event Manager. EventTrigger names must be unique. ähnelt.
        /// </summary>
        internal static string Error_CantChangeNameOfEventTriggerXToYThereAlreadyExistsSuchAnEventTrigger {
            get {
                return ResourceManager.GetString("Error_CantChangeNameOfEventTriggerXToYThereAlreadyExistsSuchAnEventTrigger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Can&apos;t change the name of the Event &apos;{0}&apos; to &apos;{1}&apos;. There already exists such an Event in the owning Event Manager. Event names must be unique. ähnelt.
        /// </summary>
        internal static string Error_CantChangeNameOfEventXToYThereAlreadyExistsSuchAnEvent {
            get {
                return ResourceManager.GetString("Error_CantChangeNameOfEventXToYThereAlreadyExistsSuchAnEvent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Can&apos;t do this. The event &apos;{0}&apos; (type-name=&apos;{1}&apos;) has not been added to an EventManager. ähnelt.
        /// </summary>
        internal static string Error_CantDoThisEventXTypeNameYHasNotBeenAddedToManager {
            get {
                return ResourceManager.GetString("Error_CantDoThisEventXTypeNameYHasNotBeenAddedToManager", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The EventManager returned by the existing IEventManagerService is null. ähnelt.
        /// </summary>
        internal static string Error_EventManagerReturnedByEventServiceIsNull {
            get {
                return ResourceManager.GetString("Error_EventManagerReturnedByEventServiceIsNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The name of the Event is null. ähnelt.
        /// </summary>
        internal static string Error_EventNameIsNull {
            get {
                return ResourceManager.GetString("Error_EventNameIsNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The name of the EventTrigger is null. ähnelt.
        /// </summary>
        internal static string Error_EventTriggerNameIsNull {
            get {
                return ResourceManager.GetString("Error_EventTriggerNameIsNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The EventTrigger &apos;{0}&apos; already has been added to an EventManager. ähnelt.
        /// </summary>
        internal static string Error_EventTriggerXAlreadyAddedToAnEventManager {
            get {
                return ResourceManager.GetString("Error_EventTriggerXAlreadyAddedToAnEventManager", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The Event &apos;{0}&apos; already has been added to an EventManager. ähnelt.
        /// </summary>
        internal static string Error_EventXAlreadyAddedToAnEventManager {
            get {
                return ResourceManager.GetString("Error_EventXAlreadyAddedToAnEventManager", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The requested Event &apos;{0}&apos; doesn&apos;t exist in the EventManager. ähnelt.
        /// </summary>
        internal static string Error_EventXDoesNotExistInEventManager {
            get {
                return ResourceManager.GetString("Error_EventXDoesNotExistInEventManager", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The floor number &apos;{0} is invalid. Only values from 0 to {1} are valid. ähnelt.
        /// </summary>
        internal static string Error_FloorXIsInvalidFloorCountY {
            get {
                return ResourceManager.GetString("Error_FloorXIsInvalidFloorCountY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The IEventManagerService is missing. This is required for this operation. ähnelt.
        /// </summary>
        internal static string Error_IEventManagerServiceIsMissing {
            get {
                return ResourceManager.GetString("Error_IEventManagerServiceIsMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &quot;The LongTermEvent is required to be added to an EventManager.&quot; ähnelt.
        /// </summary>
        internal static string Error_LongTermEventRequiresEventManager {
            get {
                return ResourceManager.GetString("Error_LongTermEventRequiresEventManager", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die There already exists an Event with the name &apos;{0}&apos;. Events must have unique names. ähnelt.
        /// </summary>
        internal static string Error_ThereAlreadyExistsAnEventNamedX {
            get {
                return ResourceManager.GetString("Error_ThereAlreadyExistsAnEventNamedX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die There already exists an EventTrigger with the name &apos;{0}&apos;. EventTriggers must have unique names. ähnelt.
        /// </summary>
        internal static string Error_ThereAlreadyExistsAnEventTriggerNamedX {
            get {
                return ResourceManager.GetString("Error_ThereAlreadyExistsAnEventTriggerNamedX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Missing Information ähnelt.
        /// </summary>
        internal static string MissingInformation {
            get {
                return ResourceManager.GetString("MissingInformation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please enter a name. ähnelt.
        /// </summary>
        internal static string PleaseEnterName {
            get {
                return ResourceManager.GetString("PleaseEnterName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Identification ähnelt.
        /// </summary>
        internal static string PropCate_Identification {
            get {
                return ResourceManager.GetString("PropCate_Identification", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Settings ähnelt.
        /// </summary>
        internal static string PropCate_Settings {
            get {
                return ResourceManager.GetString("PropCate_Settings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The area in which the AreaEventTrigger may get triggered. ähnelt.
        /// </summary>
        internal static string PropDesc_AET_Area {
            get {
                return ResourceManager.GetString("PropDesc_AET_Area", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The area in which the AreaEventTrigger may get triggered (in tile-space). ähnelt.
        /// </summary>
        internal static string PropDesc_AET_TileArea {
            get {
                return ResourceManager.GetString("PropDesc_AET_TileArea", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The Event that gets triggered when the DualSwitchEvent is triggered and the IsSwitched flag is false. ähnelt.
        /// </summary>
        internal static string PropDesc_DSEvent_EventOff {
            get {
                return ResourceManager.GetString("PropDesc_DSEvent_EventOff", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The Event that gets triggered when the DualSwitchEvent is triggered and the IsSwitched flag is true. ähnelt.
        /// </summary>
        internal static string PropDesc_DSEvent_EventOn {
            get {
                return ResourceManager.GetString("PropDesc_DSEvent_EventOn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die States whether the DualSwitchEvent can be switched on or off.. ähnelt.
        /// </summary>
        internal static string PropDesc_DSEvent_IsSwitchable {
            get {
                return ResourceManager.GetString("PropDesc_DSEvent_IsSwitchable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die States whether the DualSwitchEvent is initially in a switched state or not. ähnelt.
        /// </summary>
        internal static string PropDesc_DSEvent_IsSwitched {
            get {
                return ResourceManager.GetString("PropDesc_DSEvent_IsSwitched", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The (unique) name of the Event.  ähnelt.
        /// </summary>
        internal static string PropDesc_E_Name {
            get {
                return ResourceManager.GetString("PropDesc_E_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The Event which gets triggered when the EventTrigger is triggered. ähnelt.
        /// </summary>
        internal static string PropDesc_ET_Event {
            get {
                return ResourceManager.GetString("PropDesc_ET_Event", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die States whether the EventTrigger is initially in an active state or not. Only active Triggers can get triggered. ähnelt.
        /// </summary>
        internal static string PropDesc_ET_IsActive {
            get {
                return ResourceManager.GetString("PropDesc_ET_IsActive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The (unique) name of the EventTrigger. ähnelt.
        /// </summary>
        internal static string PropDesc_ET_Name {
            get {
                return ResourceManager.GetString("PropDesc_ET_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The floor this Object is part of. ähnelt.
        /// </summary>
        internal static string PropDesc_Floor {
            get {
                return ResourceManager.GetString("PropDesc_Floor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The list of events this MultiEvent delegates all calls to Trigger to. ähnelt.
        /// </summary>
        internal static string PropDesc_MultiEvent_Events {
            get {
                return ResourceManager.GetString("PropDesc_MultiEvent_Events", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The event that gets triggered after Time seconds after the TimedEvent was triggered. ähnelt.
        /// </summary>
        internal static string PropDesc_TimedEvent_Event {
            get {
                return ResourceManager.GetString("PropDesc_TimedEvent_Event", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The time in seconds until the TimedEvent delegates a Trigger call onto the Event. ähnelt.
        /// </summary>
        internal static string PropDesc_TimedEvent_Time {
            get {
                return ResourceManager.GetString("PropDesc_TimedEvent_Time", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Specifies type information about the Object. ähnelt.
        /// </summary>
        internal static string PropDesc_TypeName {
            get {
                return ResourceManager.GetString("PropDesc_TypeName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Trigger Area ähnelt.
        /// </summary>
        internal static string PropDisp_AET_Area {
            get {
                return ResourceManager.GetString("PropDisp_AET_Area", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Trigger Area (in tile-space) ähnelt.
        /// </summary>
        internal static string PropDisp_AET_TileArea {
            get {
                return ResourceManager.GetString("PropDisp_AET_TileArea", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Event (when disabled) ähnelt.
        /// </summary>
        internal static string PropDisp_DSEvent_EventOff {
            get {
                return ResourceManager.GetString("PropDisp_DSEvent_EventOff", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Event (when enabled) ähnelt.
        /// </summary>
        internal static string PropDisp_DSEvent_EventOn {
            get {
                return ResourceManager.GetString("PropDisp_DSEvent_EventOn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Is Switchable ähnelt.
        /// </summary>
        internal static string PropDisp_DSEvent_IsSwitchable {
            get {
                return ResourceManager.GetString("PropDisp_DSEvent_IsSwitchable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Is Switched ähnelt.
        /// </summary>
        internal static string PropDisp_DSEvent_IsSwitched {
            get {
                return ResourceManager.GetString("PropDisp_DSEvent_IsSwitched", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Event ähnelt.
        /// </summary>
        internal static string PropDisp_Event {
            get {
                return ResourceManager.GetString("PropDisp_Event", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Floor ähnelt.
        /// </summary>
        internal static string PropDisp_Floor {
            get {
                return ResourceManager.GetString("PropDisp_Floor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Is Active ähnelt.
        /// </summary>
        internal static string PropDisp_IsActive {
            get {
                return ResourceManager.GetString("PropDisp_IsActive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Events ähnelt.
        /// </summary>
        internal static string PropDisp_MultiEvent_Events {
            get {
                return ResourceManager.GetString("PropDisp_MultiEvent_Events", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Name ähnelt.
        /// </summary>
        internal static string PropDisp_Name {
            get {
                return ResourceManager.GetString("PropDisp_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Event ähnelt.
        /// </summary>
        internal static string PropDisp_TimedEvent_Event {
            get {
                return ResourceManager.GetString("PropDisp_TimedEvent_Event", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Time ähnelt.
        /// </summary>
        internal static string PropDisp_TimedEvent_Time {
            get {
                return ResourceManager.GetString("PropDisp_TimedEvent_Time", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Type Name ähnelt.
        /// </summary>
        internal static string PropDisp_TypeName {
            get {
                return ResourceManager.GetString("PropDisp_TypeName", resourceCulture);
            }
        }
    }
}
