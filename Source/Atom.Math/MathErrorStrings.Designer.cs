//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Atom.Math {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class MathErrorStrings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal MathErrorStrings() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Atom.Math.MathErrorStrings", typeof(MathErrorStrings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The argument is expected to be between {0} and {1} (including {0} and {1}). ähnelt.
        /// </summary>
        public static string ArgumentInIntervalXYInclusive {
            get {
                return ResourceManager.GetString("ArgumentInIntervalXYInclusive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The given argument is infinite or NaN. This is not allowed. ähnelt.
        /// </summary>
        public static string ArgumentIsInfinityNaN {
            get {
                return ResourceManager.GetString("ArgumentIsInfinityNaN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The given argument is too large for the set iteration limit. ähnelt.
        /// </summary>
        public static string ArgumentTooLargeForIterationLimit {
            get {
                return ResourceManager.GetString("ArgumentTooLargeForIterationLimit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Can&apos;t receive the value. The vertex order is &apos;TurnDirection.None&apos;. ähnelt.
        /// </summary>
        public static string CantReceiveValueVertexOrderIsNone {
            get {
                return ResourceManager.GetString("CantReceiveValueVertexOrderIsNone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Can&apos;t set the vertex order to &apos;TurnDirection.None&apos;. ähnelt.
        /// </summary>
        public static string CantSetVertexOrderToNone {
            get {
                return ResourceManager.GetString("CantSetVertexOrderToNone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The size of the matrices is incompatible for this operation. ähnelt.
        /// </summary>
        public static string IncompatibleMatricesTimes {
            get {
                return ResourceManager.GetString("IncompatibleMatricesTimes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Dimensions mismatch. This operation requires the matrices to be of the same size. ähnelt.
        /// </summary>
        public static string MatrixDimensionsMismatch {
            get {
                return ResourceManager.GetString("MatrixDimensionsMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The Matrix is singular/degenerated. (--&gt; The Matrix is not 	invertible) ähnelt.
        /// </summary>
        public static string MatrixIsSingular {
            get {
                return ResourceManager.GetString("MatrixIsSingular", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The Matrix must be a square matrix. ähnelt.
        /// </summary>
        public static string MatrixMustBeSquare {
            get {
                return ResourceManager.GetString("MatrixMustBeSquare", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The matrix must be symmetric. ähnelt.
        /// </summary>
        public static string MatrixMustBeSymmetric {
            get {
                return ResourceManager.GetString("MatrixMustBeSymmetric", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The Matrix must be symmetric positive definite for this operation. ähnelt.
        /// </summary>
        public static string MatrixMustBeSymmetricPositiveDefinite {
            get {
                return ResourceManager.GetString("MatrixMustBeSymmetricPositiveDefinite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The matrix is not positive definite. ähnelt.
        /// </summary>
        public static string MatrixNotPositiveDefinite {
            get {
                return ResourceManager.GetString("MatrixNotPositiveDefinite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The matrix&apos;s rank is not full. ähnelt.
        /// </summary>
        public static string MatrixRankIsNotFull {
            get {
                return ResourceManager.GetString("MatrixRankIsNotFull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The number of rows of the Matrices doesn&apos;t match. ähnelt.
        /// </summary>
        public static string MatrixRowCountMismatch {
            get {
                return ResourceManager.GetString("MatrixRowCountMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Dimensions mismatch. This operation requires the matrix and the vector to be of the same size. ähnelt.
        /// </summary>
        public static string MatrixVectorDimensionsMismatch {
            get {
                return ResourceManager.GetString("MatrixVectorDimensionsMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The plane distance {0} is negative. This is not supported. ähnelt.
        /// </summary>
        public static string NegativePlaneDistance {
            get {
                return ResourceManager.GetString("NegativePlaneDistance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die This operation is invalid on a 0-vector. ähnelt.
        /// </summary>
        public static string OperationInvalidOnZeroVector {
            get {
                return ResourceManager.GetString("OperationInvalidOnZeroVector", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die This operation requires at least one point. ähnelt.
        /// </summary>
        public static string OperationRequiresAtleastOnePoint {
            get {
                return ResourceManager.GetString("OperationRequiresAtleastOnePoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The near plane distance is larger than the far plane distance. This is not allowed. ähnelt.
        /// </summary>
        public static string OppositePlanes {
            get {
                return ResourceManager.GetString("OppositePlanes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The field of view value &apos;{0}&apos; is out of valid range of 0 and PI (180 degree). ähnelt.
        /// </summary>
        public static string OutRangeFieldOfView {
            get {
                return ResourceManager.GetString("OutRangeFieldOfView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The specified angle &apos;{0}&apos; is greater than two Pi. ähnelt.
        /// </summary>
        public static string SpecifiedAngleXGreaterTwoPi {
            get {
                return ResourceManager.GetString("SpecifiedAngleXGreaterTwoPi", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Triangulation requires at least 3 vertices as its input. ähnelt.
        /// </summary>
        public static string TriangulationRequiresAtLeastThreeVertices {
            get {
                return ResourceManager.GetString("TriangulationRequiresAtLeastThreeVertices", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The given value is greater than the maximum. ähnelt.
        /// </summary>
        public static string ValueGreaterThanMaximum {
            get {
                return ResourceManager.GetString("ValueGreaterThanMaximum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The given value is less than the minimum. ähnelt.
        /// </summary>
        public static string ValueLessThanMinimum {
            get {
                return ResourceManager.GetString("ValueLessThanMinimum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Vector length mismatch. This operation only works with Vectors that have the same number of elements. ähnelt.
        /// </summary>
        public static string VectorLengthMismatch {
            get {
                return ResourceManager.GetString("VectorLengthMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The vector must have the same number of elements as the number of rows of the matrix. ähnelt.
        /// </summary>
        public static string VectorSizeMatrixRowCountMismatch {
            get {
                return ResourceManager.GetString("VectorSizeMatrixRowCountMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The vertex count is zero. ähnelt.
        /// </summary>
        public static string VertexCountIsZero {
            get {
                return ResourceManager.GetString("VertexCountIsZero", resourceCulture);
            }
        }
    }
}
