<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentInIntervalXYInclusive" xml:space="preserve">
    <value>The argument is expected to be between {0} and {1} (including {0} and {1}).</value>
  </data>
  <data name="ArgumentIsInfinityNaN" xml:space="preserve">
    <value>The given argument is infinite or NaN. This is not allowed.</value>
  </data>
  <data name="ArgumentTooLargeForIterationLimit" xml:space="preserve">
    <value>The given argument is too large for the set iteration limit.</value>
  </data>
  <data name="CantReceiveValueVertexOrderIsNone" xml:space="preserve">
    <value>Can't receive the value. The vertex order is 'TurnDirection.None'.</value>
  </data>
  <data name="CantSetVertexOrderToNone" xml:space="preserve">
    <value>Can't set the vertex order to 'TurnDirection.None'.</value>
  </data>
  <data name="IncompatibleMatricesTimes" xml:space="preserve">
    <value>The size of the matrices is incompatible for this operation.</value>
  </data>
  <data name="MatrixDimensionsMismatch" xml:space="preserve">
    <value>Dimensions mismatch. This operation requires the matrices to be of the same size.</value>
  </data>
  <data name="MatrixIsSingular" xml:space="preserve">
    <value>The Matrix is singular/degenerated. (--&gt; The Matrix is not 	invertible)</value>
  </data>
  <data name="MatrixMustBeSquare" xml:space="preserve">
    <value>The Matrix must be a square matrix.</value>
  </data>
  <data name="MatrixMustBeSymmetric" xml:space="preserve">
    <value>The matrix must be symmetric.</value>
  </data>
  <data name="MatrixMustBeSymmetricPositiveDefinite" xml:space="preserve">
    <value>The Matrix must be symmetric positive definite for this operation.</value>
  </data>
  <data name="MatrixNotPositiveDefinite" xml:space="preserve">
    <value>The matrix is not positive definite.</value>
  </data>
  <data name="MatrixRankIsNotFull" xml:space="preserve">
    <value>The matrix's rank is not full.</value>
  </data>
  <data name="MatrixRowCountMismatch" xml:space="preserve">
    <value>The number of rows of the Matrices doesn't match.</value>
  </data>
  <data name="MatrixVectorDimensionsMismatch" xml:space="preserve">
    <value>Dimensions mismatch. This operation requires the matrix and the vector to be of the same size.</value>
  </data>
  <data name="NegativePlaneDistance" xml:space="preserve">
    <value>The plane distance {0} is negative. This is not supported.</value>
  </data>
  <data name="OperationInvalidOnZeroVector" xml:space="preserve">
    <value>This operation is invalid on a 0-vector.</value>
  </data>
  <data name="OperationRequiresAtleastOnePoint" xml:space="preserve">
    <value>This operation requires at least one point.</value>
  </data>
  <data name="OppositePlanes" xml:space="preserve">
    <value>The near plane distance is larger than the far plane distance. This is not allowed.</value>
  </data>
  <data name="OutRangeFieldOfView" xml:space="preserve">
    <value>The field of view value '{0}' is out of valid range of 0 and PI (180 degree).</value>
  </data>
  <data name="SpecifiedAngleXGreaterTwoPi" xml:space="preserve">
    <value>The specified angle '{0}' is greater than two Pi.</value>
  </data>
  <data name="TriangulationRequiresAtLeastThreeVertices" xml:space="preserve">
    <value>Triangulation requires at least 3 vertices as its input.</value>
  </data>
  <data name="ValueGreaterThanMaximum" xml:space="preserve">
    <value>The given value is greater than the maximum.</value>
  </data>
  <data name="ValueLessThanMinimum" xml:space="preserve">
    <value>The given value is less than the minimum.</value>
  </data>
  <data name="VectorLengthMismatch" xml:space="preserve">
    <value>Vector length mismatch. This operation only works with Vectors that have the same number of elements.</value>
  </data>
  <data name="VectorSizeMatrixRowCountMismatch" xml:space="preserve">
    <value>The vector must have the same number of elements as the number of rows of the matrix.</value>
  </data>
  <data name="VertexCountIsZero" xml:space="preserve">
    <value>The vertex count is zero.</value>
  </data>
</root>