// <copyright file="RelaxedEventHandler.cs" company="federrot Software">
//     Copyright (c) federrot Software. All rights reserved.
// </copyright>
// <summary>
//     Defines the Atom.RelaxedEventHandler{TEventArgs} and Atom.RelaxedEventHandler{TSender, TEventArgs} delegates.
// </summary>
// <author>
//     Paul Ennemoser (Tick)
// </author>

namespace Atom
{
    using System;

    /// <summary>
    /// Defines an <see cref="EventHandler{TEventArgs}"/> that allows 
    /// the usage of EventArgs that don't inherit from <see cref="EventArgs"/>.
    /// </summary>
    /// <typeparam name="TEventArgs">
    /// The type of the event data generated by the event.
    /// </typeparam>
    /// <param name="sender">
    /// The source of the event.
    /// </param>
    /// <param name="e">
    /// The event arguments of type <typeparamref name="TEventArgs"/>.
    /// </param>
    [Serializable]
    public delegate void RelaxedEventHandler<TEventArgs>( object sender, TEventArgs e );
    
    /// <summary>
    /// Defines a fully typesafe <see cref="EventHandler{TEventArgs}"/> that allows 
    /// the usage of EventArgs that don't inherit from <see cref="EventArgs"/>.
    /// </summary>
    /// <typeparam name="TSender">
    /// The type of the object that raises the event.
    /// </typeparam>
    /// <typeparam name="TEventArgs">
    /// The type of the event data generated by the event.
    /// </typeparam>
    /// <param name="sender">
    /// The source of the event.
    /// </param>
    /// <param name="e">
    /// The event arguments of type <typeparamref name="TEventArgs"/>.
    /// </param>
    [Serializable]
    public delegate void RelaxedEventHandler<TSender, TEventArgs>( TSender sender, TEventArgs e );
}