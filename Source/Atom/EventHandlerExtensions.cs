// <copyright file="EventHandlerExtensions.cs" company="federrot Software">
//     Copyright (c) federrot Software. All rights reserved.
// </copyright>
// <summary>
//     Defines the Atom.EventHandlerExtensions class.
// </summary>
// <author>
//     Paul Ennemoser (Tick)
// </author>

namespace Atom
{
    using System;

    /// <summary>
    /// Static class that contains extension methods for EventHandlers.
    /// </summary>
    public static class EventHandlerExtensions
    {
        /// <summary>
        /// Raises this EventHandler.
        /// </summary>
        /// <param name="eventHandler">
        /// The EventHandler to raise. Is allowed to be null.
        /// </param>
        /// <param name="sender">
        /// The source of the event.
        /// </param>
        /// <param name="e">
        /// The EventArgs that contain the event data.
        /// </param>
        public static void Raise( this EventHandler eventHandler, object sender, EventArgs e )
        {
            if( eventHandler != null )
            {
                eventHandler( sender, e );
            }
        }

        /// <summary>
        /// Raises this EventHandler with <see cref="EventArgs.Empty"/>.
        /// </summary>
        /// <param name="eventHandler">
        /// The EventHandler to raise. Is allowed to be null.
        /// </param>
        /// <param name="sender">
        /// The source of the event.
        /// </param>
        public static void Raise( this EventHandler eventHandler, object sender )
        {
            if( eventHandler != null )
            {
                eventHandler( sender, EventArgs.Empty );
            }
        }
        
        /// <summary>
        /// Raises this <see cref="SimpleEventHandler{TSender}"/>.
        /// </summary>
        /// <typeparam name="TSender">
        /// The type of the object that raises the event.
        /// </typeparam>
        /// <param name="eventHandler">
        /// The SimpleEventHandler{TSender} to raise. Is allowed to be null.
        /// </param>
        /// <param name="sender">
        /// The source of the event.
        /// </param>
        public static void Raise<TSender>( this SimpleEventHandler<TSender> eventHandler, TSender sender )
        {
            if( eventHandler != null )
            {
                eventHandler( sender );
            }
        }

        /// <summary>
        /// Raises this <see cref="EventHandler{TEventArgs}"/>.
        /// </summary>
        /// <typeparam name="TEventArgs">
        /// The type of the event data generated by the event.
        /// </typeparam>
        /// <param name="eventHandler">
        /// The EventHandler{TEventArgs} to raise. Is allowed to be null.
        /// </param>
        /// <param name="sender">
        /// The source of the event.
        /// </param>
        /// <param name="e">
        /// The EventArgs that contain the event data.
        /// </param>
        public static void Raise<TEventArgs>( this EventHandler<TEventArgs> eventHandler, object sender, TEventArgs e )
            where TEventArgs : EventArgs
        {
            if( eventHandler != null )
            {
                eventHandler( sender, e );
            }
        }

        /// <summary>
        /// Raises this <see cref="RelaxedEventHandler{TEventArgs}"/>.
        /// </summary>
        /// <typeparam name="TEventArgs">
        /// The type of the event data generated by the event.
        /// </typeparam>
        /// <param name="eventHandler">
        /// The RelaxedEventHandler{TEventArgs} to raise. Is allowed to be null.
        /// </param>
        /// <param name="sender">
        /// The source of the event.
        /// </param>
        /// <param name="e">
        /// The EventArgs that contain the event data.
        /// </param>
        public static void Raise<TEventArgs>( this RelaxedEventHandler<TEventArgs> eventHandler, object sender, TEventArgs e )
        {
            if( eventHandler != null )
            {
                eventHandler( sender, e );
            }
        }

        /// <summary>
        /// Raises this <see cref="RelaxedEventHandler{TSender, TEventArgs}"/>.
        /// </summary>
        /// <typeparam name="TSender">
        /// The type of the object that raises the event.
        /// </typeparam>
        /// <typeparam name="TEventArgs">
        /// The type of the event data generated by the event.
        /// </typeparam>
        /// <param name="eventHandler">
        /// The RelaxedEventHandler{TSender, TEventArgs} to raise. Is allowed to be null.
        /// </param>
        /// <param name="sender">
        /// The source of the event.
        /// </param>
        /// <param name="e">
        /// The EventArgs that contain the event data.
        /// </param>
        public static void Raise<TSender, TEventArgs>( this RelaxedEventHandler<TSender, TEventArgs> eventHandler, TSender sender, TEventArgs e )
        {
            if( eventHandler != null )
            {
                eventHandler( sender, e );
            }
        }
    }
}
